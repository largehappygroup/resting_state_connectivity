% for loop iterating through participants in preprocessed folder
datapath = "preprocessed/";
files = dir(datapath); for i=3:numel(files); fnames{i-2}=files(i).name; end

for i=1:numel(fnames)
    tic
    name = regexp(fnames{i}, '.nii.gz', 'split');
    name = name{1};
    fprintf("regressing out nuissances for %s\n", name)

    brain_path = sprintf("mnt/preprocessed/%s.nii.gz", name);
    brain_data = niftiread(brain_path);

    % find motion parameters file
    motion_filepath = sprintf("mnt/codeprose/%s/st_mc.nii.par", name);
    
    % design matrix and data
    X = make_design_matrix(motion_filepath);
    Y = reshape(brain_data, [(91*109*91),600])';

    % fitting parameters to brain signal
    b = X\Y;
    Yhat = X*b;
    YC = Y-Yhat;
    YC = reshape(YC', [91,109,91,600]);
    
    outfile = sprintf("preprocessed/%s_mc", name(5:end));
    disp(outfile)
    
    niftiwrite(YC, outfile);
    % compress_file = sprintf('/home/zachkaras/fsl/bin/fslmaths %s_mc.nii -mul 1 %s_mc.nii.gz', name(5:end));
    compress_file = sprintf("gzip preprocessed/%s_mc.nii", name(5:end));
    system(compress_file);
    delete_original = sprintf("rm preprocessed/%s", brain_path);
    system(delete_original);
    toc
    break

end

function X = make_design_matrix(path)
    % mean offset, linear, and quadratic trends
    n = 600; % num volumes
    mean_offset = ones(n,1);
    linear_trend = (1:n)';
    quad_trend = (1:n)'.^2;

    % load parameters (clip to 600 volumes)
    Motion = importdata(path);
    Motion = Motion(1:600, :);
    dMP = diff(Motion);
    dMP = [dMP(1,:); dMP];

    X = [mean_offset, linear_trend, quad_trend, Motion, dMP];
end